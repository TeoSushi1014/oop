Câu a. Cài đặt lớp Bieuthuc
Cài đặt lớp Bieuthuc với mô tả lớp như sau:

class Bieuthuc
{
protected:
    int a, b; // hai toán hạng
    char pheptoan; // ký tự đại diện phép toán {+, -, *}
public:
    Bieuthuc(int level); // sinh ngẫu nhiên biểu thức theo quy luật
    friend ostream& operator<<(ostream& out, Bieuthuc bt); // xuất ra theo dạng a # b
    bool kiemtra(float traloi); //nhận câu trả lời và kiểm tra xem giá trị biểu thức có trùng câu trả lời không
    float giatri(); //tính giá trị biểu thức
};

Lưu ý: qui luật sinh biểu thức như sau:

-Level 1: chỉ có phép toán cộng, 1<= a, b <= 10

-Level 2: có phép toán + và - , 1<= a,b <= 10

-Level 3: có phép toán + , - ,và * , 1<= a,b <= 10

-Level 4: có phép toán + và - , 10<= a,b <= 100

-Level 5+: có phép toán + , - và * , 10<= a,b <= 100

Câu b. Viết chương trình hoàn chỉnh cho phép lần lượt sinh các câu hỏi, hiển thị cấp độ khó và theo dõi số điểm của người chơi
Câu c. Cài đặt lớp BieuthucCong, BieuthucTru, va BieuthucNhan
Câu d - Xây dựng lớp đề thi có chức năng sinh ngẫu nhiên
class Dethi{
private:
    vector<Bieuthuc> ds; //Chứa danh sách các câu hỏi là các biểu thức
public:
    Dethi(int n1, int n2, int n3); //Sinh danh sách gồm n1 biểu thức chỉ gồm phép cộng,
                                  // n2 biểu thức chỉ gồm phép trừ, và
                                  // n3 biểu thức chỉ gồm phép nhân.
    void xuat(ostream& output); // xuất danh sách các câu hỏi ra màn hình, mỗi câu hỏi trên 1 dòng, có dạng a#b = ?
    int danhgia(istream& input); //đọc n1+n2+n3 câu trả lời từ istream (có thể từ cin hoặc file), trả về số câu trả lời đúng.
};

Lưu ý: Chỉ import 2 file Dethi.h và Dethi.cpp. Giả định Bieuthuc, BieuthucCong, BieuthucTru, va BieuthucNhan đã được định nghĩa.
Câu e. Xây dựng các lớp biểu thức phức tạp hơn, ví dụ (a*a + b*b) hay (a#b)*(a#b), để tăng cấp độ khó cho trò chơi
#pragma once
#include "Bieuthuc.h"
#include <iostream>
using namespace std;
class BieuthucPT : public Bieuthuc
{
private:
     //..Bổ sung thêm dữ liệu để lưu trữ được (a#b) # (c#d)
public:
    BieuthucPT(int level); //overide để sinh ngẫu nhiên được dạng biểu thức mới, quy luật sinh như sinh lớp Bieuthuc
    friend ostream& operator<<(ostream& out, BieuthucPT bt); //overide để xuất dạng biểu thức mới
    bool kiemtra(float traloi); //overide...
    float giatri(); //overide...
};

//Lưu ý, có thể có nhiều phương án cài đặt, nên chọn phương án dùng lại code nhiều nhất có thể
//Giả định lớp Bieuthuc và hàm main() đã có, SV chỉ cần upload 2 file: BieuthucPT.h và BieuthucPT.cpp
f. Kết hợp với lớp phân số Fraction (đã tạo từ chương trước)
Xây dựng biểu thức theo dạng  a/b # c/d, với a,b,c,d là các số nguyên và # là phép toán +, - , hoặc *. Tạo lớp BieuthucPS có cùng interface với lớp Bieuthuc

#pragma once
#include "Bieuthuc.h"
#include "Fraction.h"

class BieuthucPS : public Bieuthuc
{
protected:
    Fraction a, b;
public:
    BieuthucPS(int level);
    friend ostream& operator<<(ostream& out, BieuthucPS bt);
    bool kiemtra(float traloi);
    float giatri();
};

Lưu ý: Tận dụng code đã viết càng nhiều càng tốt